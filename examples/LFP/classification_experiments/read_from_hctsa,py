import numpy as np
import h5py
import pandas as pd
from sklearn.metrics import roc_curve, roc_auc_score, auc


import matplotlib.pyplot as plt

# % Matlab code to export the data
# writetable(TimeSeries,  'TimeSeries.csv')
# writetable(Operations,  'Operations.csv')

prefix_filename = '/Users/orabe/Library/Mobile Documents/com~apple~CloudDocs/0_TU/Master/master_thesis/HCTSA_processed/hctsa/'

ops = pd.read_csv(prefix_filename + 'Operations.csv') 
timeseries = pd.read_csv(prefix_filename + 'TimeSeries.csv') 
timeseries = timeseries[['ID', 'Name', 'Keywords', 'Length', 'Group']]

with h5py.File(prefix_filename + 'HCTSA_N.mat' ,'r') as f:
    feature_matrix = f['/TS_DataMat'][()].T # times x features
    
    
print(ops.shape)
print(timeseries.shape)
print(feature_matrix.shape)



# binary classification: use 'Group' column as labels
y = timeseries['Group'].values

# Convert string labels to binary (e.g., 'normalWalk' = 0, 'gaitMod' = 1)
y = np.where(y == 'gaitMod', 1, 0)
X = feature_matrix

# Plot ROC curves for the first 5 features
plt.figure()
for i in range(X.shape[1]):
    y_score = X[:, i]
    fpr, tpr, _ = roc_curve(y, y_score)
    roc_auc = roc_auc_score(y, y_score)
    plt.plot(fpr, tpr, lw=2, label=f'Feature {i+1} (AUC = {roc_auc:.2f})')

plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curves')
# plt.legend(loc="lower right")
plt.savefig('roc_curves_hctsa.png', dpi=150)
plt.show()




print("\n" + "--" * 20)





def plot_roc_curves_and_data_dist(X_all_features, y_true, fprs, tprs, aucs, title_suffix="Manual", all_thresholds=None):
    num_features = X_all_features.shape[1]
    # Each feature gets a row with 2 subplots: ROC and Data Distribution
    fig, axes = plt.subplots(num_features, 2, figsize=(12, 5 * num_features), squeeze=False) 

    for i in range(num_features):
        ax_roc = axes[i, 0]
        ax_data = axes[i, 1]
        
        current_fpr = fprs[i]
        current_tpr = tprs[i]
        current_auc = aucs[i]
        current_threshold_values = all_thresholds[i] if all_thresholds and i < len(all_thresholds) else None

        # --- Plot ROC Curve ---
        ax_roc.plot(current_fpr, current_tpr, label=f'AUC={current_auc:.3f}', marker='o', markersize=4, linestyle='-')
        ax_roc.plot([0, 1], [0, 1], 'k--', label='Chance')
        ax_roc.set_xlabel('False Positive Rate')
        ax_roc.set_ylabel('True Positive Rate')
        ax_roc.set_title(f'ROC: Feature {i+1} ({title_suffix})')
        ax_roc.legend(loc='lower right')
        ax_roc.grid(True)

        # Determine annotation indices for thresholds
        annotation_indices = []
        if current_threshold_values is not None and len(current_fpr) == len(current_threshold_values):
            num_points = len(current_fpr)
            if num_points > 0:
                annotation_indices.append(0) 
            if num_points > 2:
                step = max(1, num_points // 4) 
                for k_step in range(step, num_points -1 , step):
                    if k_step not in annotation_indices:
                        annotation_indices.append(k_step)
            if num_points > 1 and (num_points -1) not in annotation_indices :
                annotation_indices.append(num_points - 1)
            annotation_indices = sorted(list(set(annotation_indices)))


            # Annotate ROC curve
            for k_idx in annotation_indices:
                thresh_val = current_threshold_values[k_idx]
                if np.isinf(thresh_val) or thresh_val > 1e6 or thresh_val < -1e6: 
                    thresh_str = f"thr={thresh_val:.1e}"
                else:
                    thresh_str = f"thr={thresh_val:.2f}"
                
                ax_roc.annotate(thresh_str, (current_fpr[k_idx], current_tpr[k_idx]),
                            textcoords="offset points", xytext=(5,5), ha='left', fontsize=7,
                            arrowprops=dict(arrowstyle="-", connectionstyle="arc3,rad=.2", color='gray'))
        
        # --- Plot Raw Data Distribution with Thresholds ---
        current_feature_data = X_all_features[:, i]
        feature_class0 = current_feature_data[y_true == 0]
        feature_class1 = current_feature_data[y_true == 1]

        min_val = np.min(current_feature_data)
        max_val = np.max(current_feature_data)
        bins = np.linspace(min_val, max_val, 30)


        if len(feature_class0) > 0:
            ax_data.hist(feature_class0, bins=bins, alpha=0.6, label='Class 0', density=True)
        if len(feature_class1) > 0:
            ax_data.hist(feature_class1, bins=bins, alpha=0.6, label='Class 1', density=True)
        
        # Plot threshold lines from annotation_indices
        if current_threshold_values is not None:
            plotted_threshold_text_y = ax_data.get_ylim()[1] * 0.95 # Initial y for text

            for k_idx in annotation_indices:
                thresh_val = current_threshold_values[k_idx]
                # Avoid plotting inf or thresholds way outside data range for clarity
                if not (np.isinf(thresh_val) or np.isnan(thresh_val) or thresh_val > max_val + (max_val-min_val)*0.1 or thresh_val < min_val - (max_val-min_val)*0.1 ):
                    ax_data.axvline(thresh_val, color='dimgray', linestyle=':', linewidth=1.2)
                    ax_data.text(thresh_val + (max_val-min_val)*0.01, plotted_threshold_text_y, f'{thresh_val:.2f}', 
                                 rotation=90, verticalalignment='top', color='dimgray', fontsize=6)
                    plotted_threshold_text_y *= 0.9 # Stagger text slightly

        ax_data.set_xlabel(f'Feature {i+1} Value')
        ax_data.set_ylabel('Density')
        ax_data.set_title(f'Data Dist. & Thresholds (Feat {i+1})')
        ax_data.legend(loc='upper right')
        ax_data.grid(True, linestyle='--', alpha=0.7)


    plt.tight_layout(pad=2.0, h_pad=3.0) # Adjust padding
    plt.savefig(f'roc_data_dist_{title_suffix}.png', dpi=150)
    print(f"Saved plot: roc_data_dist_{title_suffix}.png")
    plt.close(fig)

    

# --- Sklearn ROC and Thresholds ---
sk_fprs = []
sk_tprs = []
sk_aucs = []
sk_all_thresholds = []

print("\n--- Sklearn ROC Computation (with Thresholds) ---")
# for i in range(X.shape[1]):
for i in range(X.shape[1]):  # Loop through all features
    feature_values = X[:, i]
    print(f"\nFeature {i+1}:")
    fpr, tpr, thresholds = roc_curve(y, feature_values, drop_intermediate=False) 
    sk_fprs.append(fpr)
    sk_tprs.append(tpr)
    auc_val = auc(fpr, tpr) 
    sk_aucs.append(auc_val)
    sk_all_thresholds.append(thresholds)

    print(f"  Sklearn Thresholds: {thresholds})")
    print(f"  Calculated Sklearn AUC: {auc_val:.4f}")

# plot_roc_curves_and_data_dist(X[:, 0:5], y, sk_fprs, sk_tprs, sk_aucs, title_suffix="sklearn", all_thresholds=sk_all_thresholds)

print("\n" + "--" * 20)
print("Final Sklearn AUCs:", [f"{auc:.4f}" for auc in sk_aucs])

# Visualize ROC AUC comparison for all features
features = [f"{i+1}" for i in range(X.shape[1])]
x = np.arange(len(features))

plt.figure(figsize=(8, 5))
plt.bar(x + 0.15, sk_aucs, width=0.3, label='Sklearn AUC', color='salmon')
plt.xticks(x, features)
plt.ylabel("AUC")
plt.title("ROC AUC Comparison (Manual vs Sklearn)")
plt.ylim(0, 1.05)
# plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.savefig("roc_auc_comparison.png", dpi=150)
print("Saved plot: roc_auc_comparison.png")
plt.show()


